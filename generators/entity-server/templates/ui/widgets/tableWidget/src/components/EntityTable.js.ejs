<%# { "useBluePrint": true, "renameTo": "`/${generator.entityFileName}/tableWidget/src/components/${generator.entityClass}Table.js`" } -%>
<%- include('../../../utils/jhipster') %>
import React from 'react';
import PropTypes from 'prop-types';
import { withTranslation } from 'react-i18next';
import { withStyles } from '@material-ui/core/styles';
import Table from '@material-ui/core/Table';
import TableHead from '@material-ui/core/TableHead';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableRow from '@material-ui/core/TableRow';
<%_ if (fields.find(field => field.fieldType === 'Boolean')) { _%>
import Checkbox from '@material-ui/core/Checkbox';
<%_ } _%>

import <%= entityInstance %>Type from 'components/__types__/<%= entityInstance %>';

const styles = {
  tableRoot: {
    marginTop: '10px',
  },
  rowRoot: {
    cursor: 'pointer',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
  },
  noItems: {
    margin: '15px',
  },
};

<%_
  const ComponentName = `${entityClass}Table`;
  const needsI18n = Object.keys(fields).some((fieldKey) => {
    const field = fields[fieldKey];
    const fieldType = getJHipsterType(field);
    return ['Instant', 'ZonedDateTime', 'LocalDate'].includes(fieldType);
  });
  const addI18nProp = needsI18n ? ', i18n' : '';
_%>
const <%= ComponentName %> = ({ items, onSelect, classes, t<%= addI18nProp %>, Actions }) => {
  const tableRows = items.map(item => (
    <TableRow hover className={classes.rowRoot} key={item.id} onClick={() => onSelect(item)}>
      <%_
        for (fieldIndex in fields) {
          const field = fields[fieldIndex];
          const fieldType = getJHipsterType(field);
          if (['Instant', 'ZonedDateTime'].includes(fieldType)) {
      _%>
      <TableCell><span>{new Date(item.<%= field.fieldName %>).toLocaleString(i18n.language)}</span></TableCell>  
      <%_ } else if (fieldType === 'Boolean') { _%>
      <TableCell align="center">
        <Checkbox disabled checked={item.<%= field.fieldName %>} />
      </TableCell>
      <%_ } else if (fieldType === 'LocalDate') { _%>
      <TableCell><span>{new Date(item.<%= field.fieldName %>).toLocaleDateString(i18n.language)}</span></TableCell>
      <%_ } else if (fieldType === 'ImageBlob') { _%>
      <TableCell><span><img src={`data:${item.<%= field.fieldName %>ContentType};base64, ${item.<%= field.fieldName %>}`} alt="" /></span></TableCell>
      <%_ } else if (fieldType === 'BinaryFileBlob') { _%>
      <TableCell>
        <span>
          <a download="<%= entityInstance %>" href={`data:${item.<%= field.fieldName %>ContentType};base64, ${item.<%= field.fieldName %>}`}>
            {t('common.download')}
          </a>
        </span>
      </TableCell>
      <%_ } else { _%>
      <TableCell><span>{item.<%= field.fieldName %>}</span></TableCell>
      <%_ } _%>
      <%_ } _%>
      {Actions && (
        <TableCell>
          <Actions item={item} />
        </TableCell>
      )}
    </TableRow>
  ));

  return (items.length ? (
    <Table className={classes.tableRoot} stickyHeader>
      <TableHead>
        <TableRow>
          <%_
          for (fieldIndex in fields) {
            const field = fields[fieldIndex];  
          _%>
          <TableCell>
            <span>{t('entities.<%= entityInstance %>.<%= field.fieldName %>')}</span>
          </TableCell>
          <%_ } _%>
          {Actions && <TableCell />}
        </TableRow>
      </TableHead>
      <TableBody>{tableRows}</TableBody>
    </Table>
  ) : (
    <div className={classes.noItems}>{t('entities.<%= entityInstance %>.noItems')}</div>
  ));
};

<%= ComponentName %>.propTypes = {
  items: PropTypes.arrayOf(<%= entityInstance %>Type).isRequired,
  onSelect: PropTypes.func,
  classes: PropTypes.shape({
    rowRoot: PropTypes.string,
    tableRoot: PropTypes.string,
    noItems: PropTypes.string,
  }).isRequired,
  t: PropTypes.func.isRequired,
  <%_ if (needsI18n) { _%>
  i18n: PropTypes.shape({ language: PropTypes.string }).isRequired,
  <%_ } _%>
  Actions: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
};

<%= ComponentName %>.defaultProps = {
  onSelect: () => {},
  Actions: null,
};

export default withStyles(styles)(withTranslation()(<%= ComponentName %>));
