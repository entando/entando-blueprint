<%# { "useBluePrint": true, "renameTo": "`/${generator.entityFileName}/tableWidget/src/components/__tests__/${generator.entityClass}Table.test.js`" } -%>
import React from 'react';
import '@testing-library/jest-dom/extend-expect';
import { fireEvent, render } from '@testing-library/react';
import 'components/__mocks__/i18n';
import <%= entityInstance %>Mocks from 'components/__mocks__/<%= entityInstance %>Mocks';
import <%= entityClass %>Table from 'components/<%= entityClass %>Table';

describe('<%= entityClass %>Table', () => {
  it('shows <%= entityInstancePlural %>', () => {
    const { getByText } = render(<<%= entityClass %>Table items={<%= entityInstance %>Mocks} />);
    <%_ const firstEntityItemField = Object.keys(mockData[0])[1]; // first non-ID _%>
    <%_ mockData.forEach(singleItem => { _%>
    expect(getByText('<%= singleItem[firstEntityItemField] %>')).toBeInTheDocument();
    <%_ }) _%>
  });

  it('shows no <%= entityInstancePlural %> message', () => {
    const { queryByText } = render(<<%= entityClass %>Table items={[]} />);
    <%_ mockData.forEach(singleItem => { _%>
    expect(queryByText('<%= singleItem[firstEntityItemField] %>')).not.toBeInTheDocument();
    <%_ }) _%>

    expect(queryByText('entities.<%= entityInstance %>.noItems')).toBeInTheDocument();
  });

  it('calls onSelect when the user clicks a table row', () => {
    const onSelectMock = jest.fn();
    const { getByText } = render(
      <<%= entityClass %>Table items={<%= entityInstance %>Mocks} onSelect={onSelectMock} />
    );
    fireEvent.click(getByText('<%= mockData[0][firstEntityItemField] %>'));
    expect(onSelectMock).toHaveBeenCalledTimes(1);
  });
});
