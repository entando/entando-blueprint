<%# { "useBluePrint": true, "renameTo": "`/${generator.entityInstance}/tableWidget/src/components/${generator.entityClass}Table.js`" } -%>
import React from 'react';
import PropTypes from 'prop-types';
import { withTranslation } from 'react-i18next';
import { withStyles } from '@material-ui/core/styles';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableRow from '@material-ui/core/TableRow';
import TableHead from '@material-ui/core/TableHead';

import <%= entityInstance %>Type from 'components/__types__/<%= entityInstance %>';

const styles = {
    root: {
        cursor: 'pointer',
    },
};

<%_ const ComponentName = `${entityClass}Table`; _%>
const <%= ComponentName %> = ({ items, onSelect, classes, t, i18n }) => {
  const tableRows = items.map(item => (
    <TableRow
      hover
      className={classes.root}
      key={item.id}
      onClick={() => onSelect(item)}
    >
      <%_ for (field in fields) { _%>
      <TableCell><span>{item.<%= fields[field].fieldName %>}</span></TableCell>
      <%_ } _%>
    </TableRow>
  ));

  return (items.length ? (
    <Table>
      <TableHead>
        <TableRow>
          <%_ for (field in fields) { _%>
          <TableCell>
            <span>{ t('entities.<%= entityInstance %>.<%= fields[field].fieldName %>') }</span>
          </TableCell>
          <%_ } _%>
        </TableRow>
      </TableHead>
      <TableBody>
          { tableRows }
      </TableBody>
    </Table>
  ) : (
    t('entities.<%= entityInstance %>.noItems')
  ));
};

<%= ComponentName %>.propTypes = {
  items: PropTypes.arrayOf(<%= entityInstance %>Type).isRequired,
  onSelect: PropTypes.func,
  classes: PropTypes.shape({
      root: PropTypes.string,
  }).isRequired,
  t: PropTypes.func.isRequired,
};

<%= ComponentName %>.defaultProps = {
  onSelect: () => {},
};

export default withStyles(styles)(withTranslation()(<%= ComponentName %>));
