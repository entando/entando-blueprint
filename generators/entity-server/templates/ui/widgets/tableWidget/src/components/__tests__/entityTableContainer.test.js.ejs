<%# { "useBluePrint": true, "renameTo": "`/${generator.entityInstance}/tableWidget/src/components/__tests__/${generator.entityClass}TableContainer.test.js`" } -%>
import React from 'react';
import { render, wait } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';

import <%= entityInstance %>Mocks from 'components/__mocks__/<%= entityInstance %>Mocks';
import { api<%= entityClassPlural %>Get } from 'api/<%= entityInstancePlural %>';
import 'i18n/__mocks__/i18nMock';
import <%= entityClass %>TableContainer from 'components/<%= entityClass %>TableContainer';

jest.mock('api/<%= entityInstancePlural %>');

jest.mock('auth/KeycloakContext', () => {
  const withKeycloak = Component => {
    return props => (
      <Component
        {...props} // eslint-disable-line react/jsx-props-no-spreading
        keycloak={{
          initialized: true,
          authenticated: true,
        }}
      />
    );
  };

  return { withKeycloak };
});

describe('<%= entityClass %>TableContainer', () => {
    const errorMessageKey = '<%= entityInstance %>.error.dataLoading';

    afterEach(() => {
        jest.clearAllMocks();
    });

    it('calls API', async () => {
        api<%= entityClassPlural %>Get.mockImplementation(() => Promise.resolve(<%= entityInstance %>Mocks));
        const { queryByText } = render(<<%= entityClass %>TableContainer />);

        await wait(() => {
            expect(api<%= entityClassPlural %>Get).toHaveBeenCalledTimes(1);
            expect(queryByText(errorMessageKey)).not.toBeInTheDocument();
        });
    });

    it('shows an error if the API call is not successful', async () => {
        api<%= entityClassPlural %>Get.mockImplementation(() => {
            throw new Error();
        });
        const { getByText } = render(<<%= entityClass %>TableContainer />);

        wait(() => {
            expect(api<%= entityClassPlural %>Get).toHaveBeenCalledTimes(1);
            expect(getByText(errorMessageKey)).toBeInTheDocument();
        });
    });
});
