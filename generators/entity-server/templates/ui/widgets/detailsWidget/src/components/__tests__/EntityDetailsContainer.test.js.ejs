<%# { "useBluePrint": true, "renameTo": "`/${generator.entityInstance}/detailsWidget/src/components/__tests__/${generator.entityClass}DetailsContainer.test.js`" } -%>
import React from 'react';
import { render, wait } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';

import 'components/__mocks__/i18n';
import get<%= entityClass %> from 'api/<%= entityInstance %>';
import <%= entityInstance %>ApiGetResponseMock from 'components/__mocks__/<%= entityInstance %>Mocks';
import <%= entityClass %>DetailsContainer from 'components/<%= entityClass %>DetailsContainer';

jest.mock('api/<%= entityInstance %>');

jest.mock('auth/KeycloakContext', () => {
  const withKeycloak = Component => {
    return props => (
      <Component
        {...props} // eslint-disable-line react/jsx-props-no-spreading
        keycloak={{
          initialized: true,
          authenticated: true,
        }}
      />
    );
  };

  return { withKeycloak };
});

beforeEach(() => {
  get<%= entityClass %>.mockClear();
});

describe('<%= entityClass %>DetailsContainer component', () => {
  test('requests data when component is mounted', async () => {
    get<%= entityClass %>.mockImplementation(() => Promise.resolve(<%= entityInstance %>ApiGetResponseMock));

    render(<<%= entityClass %>DetailsContainer id="1" />);

    await wait(() => {
      expect(get<%= entityClass %>).toHaveBeenCalledTimes(1);
    });
  });

  test('data is shown after mount API call', async () => {
    get<%= entityClass %>.mockImplementation(() => Promise.resolve(<%= entityInstance %>ApiGetResponseMock));

    const { getByText } = render(<<%= entityClass %>DetailsContainer id="1" />);

    await wait(() => {
      expect(get<%= entityClass %>).toHaveBeenCalledTimes(1);
      <%_ fields.forEach(field => { _%>
      expect(getByText('entities.<%= entityInstance %>.<%= field.fieldName %>')).toBeInTheDocument();
      <%_ }) _%>
    });
  });

  test('error is shown after failed API call', async () => {
    const onErrorMock = jest.fn();
    get<%= entityClass %>.mockImplementation(() => Promise.reject());

    const { getByText } = render(<<%= entityClass %>DetailsContainer id="1" onError={onErrorMock} />);

    await wait(() => {
      expect(get<%= entityClass %>).toHaveBeenCalledTimes(1);
      expect(onErrorMock).toHaveBeenCalledTimes(1);
      expect(getByText('common.couldNotFetchData')).toBeInTheDocument();
    });
  });
});
